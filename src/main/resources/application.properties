spring.application.name=remedy-backend
application.version=1.0.2

# Enable HTTPS for Ali
server.ssl.enabled=true
server.ssl.key-store=classpath:keystore.p12
server.ssl.key-store-type=PKCS12
server.ssl.key-store-password=alix
server.ssl.key-alias=remedy

# Redirect HTTP to HTTPS
security.require-ssl=true
server.port=8443

spring.datasource.url=jdbc:postgresql://localhost:5432/remedy-db
spring.datasource.username=postgres
spring.datasource.password=postgres

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
spring.jpa.properties.hibe1rnate.format_sql=true

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE


springdoc.api-docs.path=/api-docs



#5. For Production (When Ready to Deploy)
#
#Purchase an SSL certificate from GoDaddy or use Let's Encrypt
#Configure your domain DNS records (A record pointing to your server IP)
#When you deploy, replace the self-signed certificate with the real one:
#
#properties# Production SSL configuration
#server.ssl.key-store=/etc/ssl/remedy.p12
#server.ssl.key-store-password=${SSL_KEY_PASSWORD}
#6. Testing
#
#Run your application with the new configuration
#Access via https://localhost:8443
#Your browser should show a secure connection with a dev certificate
#
#Notes
#
#Keep keystore passwords in environment variables for production
#You'll need a real SSL certificate and proper DNS setup when you deploy
#The self-signed certificate is only for development testing
